local interface = wrap.CInterface.new()

interface:print('/* WARNING: autogenerated file */')
interface:print('')
interface:print('#include "THC.h"')
interface:print('#include "luaT.h"')
interface:print('')
interface:print('static const void *torch_CudaTensor_id = NULL;')
interface:print('')

-- specific to CUDA
wrap.argtypes.CudaTensor = {
   
   helpname = function(arg)
                 return 'CudaTensor'
              end,
   
   declare = function(arg)
                local txt = {}
                table.insert(txt, string.format("THCudaTensor *arg%d = NULL;", arg.i))
                if arg.returned then
                   table.insert(txt, string.format("int arg%d_idx = 0;", arg.i));
                end
                return table.concat(txt, '\n')
             end,
   
   check = function(arg, idx)
              return string.format("(arg%d = luaT_toudata(L, %d, torch_CudaTensor_id))", arg.i, idx)
           end,
   
   read = function(arg, idx)
             if arg.returned then
                return string.format("arg%d_idx = %d;", arg.i, idx)
             end
          end,
   
   init = function(arg)
             return string.format('arg%d = TH%s_new();', arg.i, typename)
          end,
   
   carg = function(arg, idx)
             return string.format('arg%d', arg.i)
          end,
   
   creturn = function(arg, idx)
                return string.format('arg%d', arg.i)
             end,
   
   precall = function(arg)
                local txt = {}
                if arg.default and arg.returned then
                   table.insert(txt, string.format('if(arg%d_idx)', arg.i)) -- means it was passed as arg
                   table.insert(txt, string.format('lua_pushvalue(L, arg%d_idx);', arg.i))
                   table.insert(txt, string.format('else')) -- means we did a new()
                   table.insert(txt, string.format('luaT_pushudata(L, arg%d, torch_CudaTensor_id);', arg.i))
                elseif arg.default then
                   error('a tensor cannot be optional if not returned')
                elseif arg.returned then
                   table.insert(txt, string.format('lua_pushvalue(L, arg%d_idx);', arg.i))
                end
                return table.concat(txt, '\n')
             end,
   
   postcall = function(arg)
                 local txt = {}
                 if arg.creturned then
                    -- this next line is actually debatable
                    table.insert(txt, string.format('THCudaTensor_retain(arg%d);', arg.i))
                    table.insert(txt, string.format('luaT_pushudata(L, arg%d, torch_CudaTensor_id);', arg.i))
                 end
                 return table.concat(txt, '\n')
              end
}

function interface.luaname2wrapname(self, name)
   return string.format('cutorch_CudaTensor_%s', name)
end

local function cname(name)
   return string.format('THCudaTensor_%s', name)
end

local function lastdim(argn)
   return function(arg)
             return string.format("THCudaTensor_nDimension(%s)", arg.args[argn]:carg())
          end
end

interface:wrap("zero",
               cname("zero"),
               {{name="CudaTensor", returned=true}})

interface:wrap("fill",
               cname("fill"),
               {{name="CudaTensor", returned=true},
                {name="float"}})

interface:wrap("add",
               cname("add"),
               {{name="CudaTensor",returned=true},
                {name="float"}},
               cname("cadd"),
               {{name="CudaTensor", returned=true},
                {name="float", default=1},
                {name="CudaTensor"}})

interface:wrap("mul",
               cname("mul"),
               {{name="CudaTensor", returned=true},
                {name="float"}})

interface:wrap("div",
               cname("div"),
               {{name="CudaTensor", returned=true},
                {name="float"}})

interface:wrap("cmul",
               cname("cmul"),
               {{name="CudaTensor", returned=true},
                {name="CudaTensor"}})

interface:wrap("cdiv",
               cname("cdiv"),
               {{name="CudaTensor", returned=true},
                {name="CudaTensor"}})

interface:wrap("addcmul",
                  cname("addcmul"),
                  {{name="CudaTensor", returned=true},
                   {name="float", default=1},
                   {name="CudaTensor"},
                   {name="CudaTensor"}})

interface:wrap("addcdiv",
               cname("addcdiv"),
               {{name="CudaTensor", returned=true},
                {name="float", default=1},
                {name="CudaTensor"},
                {name="CudaTensor"}})

interface:wrap("dot",
               cname("dot"),
               {{name="CudaTensor"},
                {name="CudaTensor"},
                {name="float", creturned=true}})

for _,name in ipairs({"minall", "maxall", "sumall"}) do
   interface:wrap(name,
                  cname(name),
                  {{name="CudaTensor"},            
                   {name="float", creturned=true}})
end

for _,name in ipairs({"addmv", "addmm"}) do
   interface:wrap(name,
                  cname(name),
                  {{name="CudaTensor", returned=true},
                   {name="float"}, -- because of ambiguity, see default in Tensor.lua
                   {name="float"},
                   {name="CudaTensor"},
                   {name="CudaTensor"}})
end

interface:wrap("addr",
               cname("addr"),
               {{name="CudaTensor", returned=true},
                {name="float", default=1},
                {name="CudaTensor"},
                {name="CudaTensor"}})

for _,name in ipairs({"log", "log1p", "exp",
                      "cos", "acos", "cosh",
                      "sin", "asin", "sinh",
                      "tan", "atan", "tanh",
                      "sqrt",
                      "ceil", "floor",
                      "abs"}) do
   
   interface:wrap(name,
                  cname(name),
                  {{name="CudaTensor", returned=true}})
   
end

interface:wrap("pow",
               cname("pow"),
               {{name="CudaTensor", returned=true},
                {name="float"}})

for _,name in ipairs({"meanall", "varall", "stdall"}) do
   interface:wrap(name,
                  cname(name),
                  {{name="CudaTensor"},
                   {name="float", creturned=true}})
end

interface:wrap("norm",
               cname("norm"),
                     {{name="CudaTensor"},
                      {name="float", default=2},
                      {name="float", creturned=true}})

interface:wrap("dist",
               cname("dist"),
               {{name="CudaTensor"},
                {name="CudaTensor"},
                {name="float", default=2},
                {name="float", creturned=true}})

interface:register("cutorch_CudaTensorMath__")

   interface:print([[
void cutorch_CudaTensorMath_init(lua_State *L)
{
  torch_CudaTensor_id = luaT_checktypename2id(L, "torch.CudaTensor");

  luaT_pushmetaclass(L, torch_CudaTensor_id);
  luaL_register(L, NULL, cutorch_CudaTensorMath__);
  lua_pop(L, 1);
}
]])

interface:tofile(arg[1])
